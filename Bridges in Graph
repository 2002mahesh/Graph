
#include <iostream>
#include<bits/stdc++.h>

using namespace std;

map<int,vector<int>> adjlist(int n,int e, vector<vector<int>>edges)
{
  map<int,vector<int>>adjList;

  for(int i=0;i<e;i++)
    {
       adjList[edges[i][0]].push_back(edges[i][1]);
       adjList[edges[i][1]].push_back(edges[i][0]);
      
    }

  return adjList;
}
  
  void findBridges(int src,int parent,int &timer,vector<int>&tin,vector<int>&low,unordered_map<int,bool>&vis,map<int,vector<int>>&adjList)
  {

    vis[src]=true;
    tin[src]=timer;
    low[src]=timer;
    timer++;

    for(auto nbr:adjList[src])
    {
        if(nbr==parent)
        continue;

        if(!vis[nbr])
        {
            findBridges(nbr,src,timer,tin,low,vis,adjList);

            low[src]=min(low[src],low[nbr]);

            if(low[nbr]>low[src])
            {
                cout<<"Bridge exist between "<<src<<" to "<<nbr<<endl;
            }
        }
        else
        {
             low[src]=min(low[src],low[nbr]);
        }
    }
  }
  

int main() {
 int n;
  cout<<"Enter the Number of nodes:";
  cin>>n;

  int e;
  cout<<"Enter the Number of Edges:";
  cin>>e;

  vector<vector<int>>edges;

  for(int i=0;i<e;i++)
    {
      int u,v;
      cin>>u>>v;

      edges.push_back({u,v});
    }

  map<int,vector<int>>adjList=adjlist(n,e,edges);

    int timer=0;
    vector<int>tin(n,0);
    vector<int>low(n,0);
   unordered_map<int,bool>vis;


  findBridges(0,-1,timer,tin,low,vis,adjList);


  
 

 
}
